
# This file is automatically generated by puppet-swagger-generator and
# any manual changes are likely to be clobbered when the files
# are regenerated.

require_relative '../../puppet_x/puppetlabs/swagger/fuzzy_compare'

Puppet::Type.newtype(:kubernetes_component_condition) do
  
  @doc = "Information about the condition of a component."
  

  ensurable

  
  validate do
    required_properties = [
    
      :type,
    
      :status,
    
    ]
    required_properties.each do |property|
      # We check for both places so as to cover the puppet resource path as well
      if self[property].nil? and self.provider.send(property) == :absent
        fail "You must provide a #{property}"
      end
    end
  end
  

  newparam(:name, namevar: true) do
    desc 'Name of the component_condition.'
  end
  
    
      
      newproperty(:type) do
      
        
        desc "Type of condition for a component. Valid value: 'Healthy'"
        
        def insync?(is)
          PuppetX::Puppetlabs::Swagger::Utils::fuzzy_compare(is, should)
        end
      end
    
  
    
      
      newproperty(:status) do
      
        
        desc "Status of the condition for a component. Valid values for 'Healthy': 'True', 'False', or 'Unknown'."
        
        def insync?(is)
          PuppetX::Puppetlabs::Swagger::Utils::fuzzy_compare(is, should)
        end
      end
    
  
    
      
      newproperty(:message) do
      
        
        desc "Message about the condition for a component. For example, information about a health check."
        
        def insync?(is)
          PuppetX::Puppetlabs::Swagger::Utils::fuzzy_compare(is, should)
        end
      end
    
  
    
      
      newproperty(:error) do
      
        
        desc "Condition error code for a component. For example, a health check error code."
        
        def insync?(is)
          PuppetX::Puppetlabs::Swagger::Utils::fuzzy_compare(is, should)
        end
      end
    
  
end
