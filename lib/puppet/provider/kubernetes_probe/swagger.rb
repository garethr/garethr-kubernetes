
# This file is automatically generated by puppet-swagger-generator and
# any manual changes are likely to be clobbered when the files
# are regenerated.

require_relative '../../../puppet_x/puppetlabs/kubernetes/provider'

Puppet::Type.type(:kubernetes_probe).provide(:swagger, :parent => PuppetX::Puppetlabs::Kubernetes::Provider) do

  mk_resource_methods

  def self.instance_to_hash(instance)
    {
    ensure: :present,
    name: instance.metadata.name,
    
      
        
        exec: instance.exec.respond_to?(:to_hash) ? instance.exec.to_hash : instance.exec,
        
      
    
      
        
        http_get: instance.httpGet.respond_to?(:to_hash) ? instance.httpGet.to_hash : instance.httpGet,
        
      
    
      
        
        tcp_socket: instance.tcpSocket.respond_to?(:to_hash) ? instance.tcpSocket.to_hash : instance.tcpSocket,
        
      
    
      
        
        initial_delay_seconds: instance.initialDelaySeconds.respond_to?(:to_hash) ? instance.initialDelaySeconds.to_hash : instance.initialDelaySeconds,
        
      
    
      
        
        timeout_seconds: instance.timeoutSeconds.respond_to?(:to_hash) ? instance.timeoutSeconds.to_hash : instance.timeoutSeconds,
        
      
    
      
        
        period_seconds: instance.periodSeconds.respond_to?(:to_hash) ? instance.periodSeconds.to_hash : instance.periodSeconds,
        
      
    
      
        
        success_threshold: instance.successThreshold.respond_to?(:to_hash) ? instance.successThreshold.to_hash : instance.successThreshold,
        
      
    
      
        
        failure_threshold: instance.failureThreshold.respond_to?(:to_hash) ? instance.failureThreshold.to_hash : instance.failureThreshold,
        
      
    
    object: instance,
    }
  end

  def create
    Puppet.info("Creating kubernetes_probe #{name}")
    create_instance_of('probe', name, build_params)
  end

  def flush
   unless @property_hash.empty?
     unless resource[:ensure] == :absent
        flush_instance_of('probe', name, @property_hash[:object], build_params)
      end
    end
  end

  def destroy
    Puppet.info("Deleting kubernetes_probe #{name}")
    destroy_instance_of('probe', name)
    @property_hash[:ensure] = :absent
  end

  private
  def self.list_instances
    list_instances_of('probe')
  end

  def build_params
    params = {
    
      
        exec: resource[:exec],
      
    
      
        httpGet: resource[:http_get],
      
    
      
        tcpSocket: resource[:tcp_socket],
      
    
      
        initialDelaySeconds: resource[:initial_delay_seconds],
      
    
      
        timeoutSeconds: resource[:timeout_seconds],
      
    
      
        periodSeconds: resource[:period_seconds],
      
    
      
        successThreshold: resource[:success_threshold],
      
    
      
        failureThreshold: resource[:failure_threshold],
      
    
    }
    params.delete_if { |key, value| value.nil? }
    params
  end
end
