
# This file is automatically generated by puppet-swagger-generator and
# any manual changes are likely to be clobbered when the files
# are regenerated.

require_relative '../../../puppet_x/puppetlabs/kubernetes/provider'

Puppet::Type.type(:kubernetes_object_meta).provide(:swagger, :parent => PuppetX::Puppetlabs::Kubernetes::Provider) do

  mk_resource_methods

  def self.instance_to_hash(instance)
    {
    ensure: :present,
    name: instance.metadata.name,
    
      
        
        name: instance.name.respond_to?(:to_hash) ? instance.name.to_hash : instance.name,
        
      
    
      
        
        generate_name: instance.generateName.respond_to?(:to_hash) ? instance.generateName.to_hash : instance.generateName,
        
      
    
      
        
        namespace: instance.namespace.respond_to?(:to_hash) ? instance.namespace.to_hash : instance.namespace,
        
      
    
      
        
        self_link: instance.selfLink.respond_to?(:to_hash) ? instance.selfLink.to_hash : instance.selfLink,
        
      
    
      
        
        uid: instance.uid.respond_to?(:to_hash) ? instance.uid.to_hash : instance.uid,
        
      
    
      
        
        resource_version: instance.resourceVersion.respond_to?(:to_hash) ? instance.resourceVersion.to_hash : instance.resourceVersion,
        
      
    
      
        
        generation: instance.generation.respond_to?(:to_hash) ? instance.generation.to_hash : instance.generation,
        
      
    
      
        
        creation_timestamp: instance.creationTimestamp.respond_to?(:to_hash) ? instance.creationTimestamp.to_hash : instance.creationTimestamp,
        
      
    
      
        
        deletion_timestamp: instance.deletionTimestamp.respond_to?(:to_hash) ? instance.deletionTimestamp.to_hash : instance.deletionTimestamp,
        
      
    
      
        
        deletion_grace_period_seconds: instance.deletionGracePeriodSeconds.respond_to?(:to_hash) ? instance.deletionGracePeriodSeconds.to_hash : instance.deletionGracePeriodSeconds,
        
      
    
      
        
        labels: instance.labels.respond_to?(:to_hash) ? instance.labels.to_hash : instance.labels,
        
      
    
      
        
        annotations: instance.annotations.respond_to?(:to_hash) ? instance.annotations.to_hash : instance.annotations,
        
      
    
      
        
        owner_references: hash_arrays(instance.ownerReferences),
        
      
    
      
        
        initializers: instance.initializers.respond_to?(:to_hash) ? instance.initializers.to_hash : instance.initializers,
        
      
    
      
        
        finalizers: hash_arrays(instance.finalizers),
        
      
    
      
        
        cluster_name: instance.clusterName.respond_to?(:to_hash) ? instance.clusterName.to_hash : instance.clusterName,
        
      
    
    object: instance,
    }
  end

  def create
    Puppet.info("Creating kubernetes_object_meta #{name}")
    create_instance_of('object_meta', name, build_params)
  end

  def flush
   unless @property_hash.empty?
     unless resource[:ensure] == :absent
        flush_instance_of('object_meta', name, @property_hash[:object], build_params)
      end
    end
  end

  def destroy
    Puppet.info("Deleting kubernetes_object_meta #{name}")
    destroy_instance_of('object_meta', name)
    @property_hash[:ensure] = :absent
  end

  private
  def self.list_instances
    list_instances_of('object_meta')
  end

  def build_params
    params = {
    
      
        name: resource[:name],
      
    
      
        generateName: resource[:generate_name],
      
    
      
        namespace: resource[:namespace],
      
    
      
        selfLink: resource[:self_link],
      
    
      
        uid: resource[:uid],
      
    
      
        resourceVersion: resource[:resource_version],
      
    
      
        generation: resource[:generation],
      
    
      
        creationTimestamp: resource[:creation_timestamp],
      
    
      
        deletionTimestamp: resource[:deletion_timestamp],
      
    
      
        deletionGracePeriodSeconds: resource[:deletion_grace_period_seconds],
      
    
      
        labels: resource[:labels],
      
    
      
        annotations: resource[:annotations],
      
    
      
        ownerReferences: resource[:owner_references],
      
    
      
        initializers: resource[:initializers],
      
    
      
        finalizers: resource[:finalizers],
      
    
      
        clusterName: resource[:cluster_name],
      
    
    }
    params.delete_if { |key, value| value.nil? }
    params
  end
end
