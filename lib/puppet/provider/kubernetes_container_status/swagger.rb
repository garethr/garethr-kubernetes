
# This file is automatically generated by puppet-swagger-generator and
# any manual changes are likely to be clobbered when the files
# are regenerated.

require_relative '../../../puppet_x/puppetlabs/kubernetes/provider'

Puppet::Type.type(:kubernetes_container_status).provide(:swagger, :parent => PuppetX::Puppetlabs::Kubernetes::Provider) do

  mk_resource_methods

  def self.instance_to_hash(instance)
    {
    ensure: :present,
    name: instance.metadata.name,
    
      
        
        name: instance.name.respond_to?(:to_hash) ? instance.name.to_hash : instance.name,
        
      
    
      
        
        state: instance.state.respond_to?(:to_hash) ? instance.state.to_hash : instance.state,
        
      
    
      
        
        last_state: instance.lastState.respond_to?(:to_hash) ? instance.lastState.to_hash : instance.lastState,
        
      
    
      
        
        ready: instance.ready.respond_to?(:to_hash) ? instance.ready.to_hash : instance.ready,
        
      
    
      
        
        restart_count: instance.restartCount.respond_to?(:to_hash) ? instance.restartCount.to_hash : instance.restartCount,
        
      
    
      
        
        image: instance.image.respond_to?(:to_hash) ? instance.image.to_hash : instance.image,
        
      
    
      
        
        image_id: instance.imageID.respond_to?(:to_hash) ? instance.imageID.to_hash : instance.imageID,
        
      
    
      
        
        container_id: instance.containerID.respond_to?(:to_hash) ? instance.containerID.to_hash : instance.containerID,
        
      
    
    object: instance,
    }
  end

  def create
    Puppet.info("Creating kubernetes_container_status #{name}")
    create_instance_of('container_status', name, build_params)
  end

  def flush
   unless @property_hash.empty?
     unless resource[:ensure] == :absent
        flush_instance_of('container_status', name, @property_hash[:object], build_params)
      end
    end
  end

  def destroy
    Puppet.info("Deleting kubernetes_container_status #{name}")
    destroy_instance_of('container_status', name)
    @property_hash[:ensure] = :absent
  end

  private
  def self.list_instances
    list_instances_of('container_status')
  end

  def build_params
    params = {
    
      
        name: resource[:name],
      
    
      
        state: resource[:state],
      
    
      
        lastState: resource[:last_state],
      
    
      
        ready: resource[:ready],
      
    
      
        restartCount: resource[:restart_count],
      
    
      
        image: resource[:image],
      
    
      
        imageID: resource[:image_id],
      
    
      
        containerID: resource[:container_id],
      
    
    }
    params.delete_if { |key, value| value.nil? }
    params
  end
end
