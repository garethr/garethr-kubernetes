
# This file is automatically generated by puppet-swagger-generator and
# any manual changes are likely to be clobbered when the files
# are regenerated.

require_relative '../../../puppet_x/puppetlabs/kubernetes/provider'

Puppet::Type.type(:kubernetes_scale_io_persistent_volume_source).provide(:swagger, :parent => PuppetX::Puppetlabs::Kubernetes::Provider) do

  mk_resource_methods

  def self.instance_to_hash(instance)
    {
    ensure: :present,
    name: instance.metadata.name,
    
      
        
        gateway: instance.gateway.respond_to?(:to_hash) ? instance.gateway.to_hash : instance.gateway,
        
      
    
      
        
        system: instance.system.respond_to?(:to_hash) ? instance.system.to_hash : instance.system,
        
      
    
      
        
        secret_ref: instance.secretRef.respond_to?(:to_hash) ? instance.secretRef.to_hash : instance.secretRef,
        
      
    
      
        
        ssl_enabled: instance.sslEnabled.respond_to?(:to_hash) ? instance.sslEnabled.to_hash : instance.sslEnabled,
        
      
    
      
        
        protection_domain: instance.protectionDomain.respond_to?(:to_hash) ? instance.protectionDomain.to_hash : instance.protectionDomain,
        
      
    
      
        
        storage_pool: instance.storagePool.respond_to?(:to_hash) ? instance.storagePool.to_hash : instance.storagePool,
        
      
    
      
        
        storage_mode: instance.storageMode.respond_to?(:to_hash) ? instance.storageMode.to_hash : instance.storageMode,
        
      
    
      
        
        volume_name: instance.volumeName.respond_to?(:to_hash) ? instance.volumeName.to_hash : instance.volumeName,
        
      
    
      
        
        fs_type: instance.fsType.respond_to?(:to_hash) ? instance.fsType.to_hash : instance.fsType,
        
      
    
      
        
        read_only: instance.readOnly.respond_to?(:to_hash) ? instance.readOnly.to_hash : instance.readOnly,
        
      
    
    object: instance,
    }
  end

  def create
    Puppet.info("Creating kubernetes_scale_io_persistent_volume_source #{name}")
    create_instance_of('scale_io_persistent_volume_source', name, build_params)
  end

  def flush
   unless @property_hash.empty?
     unless resource[:ensure] == :absent
        flush_instance_of('scale_io_persistent_volume_source', name, @property_hash[:object], build_params)
      end
    end
  end

  def destroy
    Puppet.info("Deleting kubernetes_scale_io_persistent_volume_source #{name}")
    destroy_instance_of('scale_io_persistent_volume_source', name)
    @property_hash[:ensure] = :absent
  end

  private
  def self.list_instances
    list_instances_of('scale_io_persistent_volume_source')
  end

  def build_params
    params = {
    
      
        gateway: resource[:gateway],
      
    
      
        system: resource[:system],
      
    
      
        secretRef: resource[:secret_ref],
      
    
      
        sslEnabled: resource[:ssl_enabled],
      
    
      
        protectionDomain: resource[:protection_domain],
      
    
      
        storagePool: resource[:storage_pool],
      
    
      
        storageMode: resource[:storage_mode],
      
    
      
        volumeName: resource[:volume_name],
      
    
      
        fsType: resource[:fs_type],
      
    
      
        readOnly: resource[:read_only],
      
    
    }
    params.delete_if { |key, value| value.nil? }
    params
  end
end
