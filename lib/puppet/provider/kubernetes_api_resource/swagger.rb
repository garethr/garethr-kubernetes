
# This file is automatically generated by puppet-swagger-generator and
# any manual changes are likely to be clobbered when the files
# are regenerated.

require_relative '../../../puppet_x/puppetlabs/kubernetes/provider'

Puppet::Type.type(:kubernetes_api_resource).provide(:swagger, :parent => PuppetX::Puppetlabs::Kubernetes::Provider) do

  mk_resource_methods

  def self.instance_to_hash(instance)
    {
    ensure: :present,
    name: instance.metadata.name,
    
      
        
        name: instance.name.respond_to?(:to_hash) ? instance.name.to_hash : instance.name,
        
      
    
      
        
        singular_name: instance.singularName.respond_to?(:to_hash) ? instance.singularName.to_hash : instance.singularName,
        
      
    
      
        
        namespaced: instance.namespaced.respond_to?(:to_hash) ? instance.namespaced.to_hash : instance.namespaced,
        
      
    
      
        
        group: instance.group.respond_to?(:to_hash) ? instance.group.to_hash : instance.group,
        
      
    
      
        
        version: instance.version.respond_to?(:to_hash) ? instance.version.to_hash : instance.version,
        
      
    
      
    
      
        
        verbs: hash_arrays(instance.verbs),
        
      
    
      
        
        short_names: hash_arrays(instance.shortNames),
        
      
    
      
        
        categories: hash_arrays(instance.categories),
        
      
    
    object: instance,
    }
  end

  def create
    Puppet.info("Creating kubernetes_api_resource #{name}")
    create_instance_of('api_resource', name, build_params)
  end

  def flush
   unless @property_hash.empty?
     unless resource[:ensure] == :absent
        flush_instance_of('api_resource', name, @property_hash[:object], build_params)
      end
    end
  end

  def destroy
    Puppet.info("Deleting kubernetes_api_resource #{name}")
    destroy_instance_of('api_resource', name)
    @property_hash[:ensure] = :absent
  end

  private
  def self.list_instances
    list_instances_of('api_resource')
  end

  def build_params
    params = {
    
      
        name: resource[:name],
      
    
      
        singularName: resource[:singular_name],
      
    
      
        namespaced: resource[:namespaced],
      
    
      
        group: resource[:group],
      
    
      
        version: resource[:version],
      
    
      
    
      
        verbs: resource[:verbs],
      
    
      
        shortNames: resource[:short_names],
      
    
      
        categories: resource[:categories],
      
    
    }
    params.delete_if { |key, value| value.nil? }
    params
  end
end
