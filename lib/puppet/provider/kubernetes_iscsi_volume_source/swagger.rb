
# This file is automatically generated by puppet-swagger-generator and
# any manual changes are likely to be clobbered when the files
# are regenerated.

require_relative '../../../puppet_x/puppetlabs/kubernetes/provider'

Puppet::Type.type(:kubernetes_iscsi_volume_source).provide(:swagger, :parent => PuppetX::Puppetlabs::Kubernetes::Provider) do

  mk_resource_methods

  def self.instance_to_hash(instance)
    {
    ensure: :present,
    name: instance.metadata.name,
    
      
        
        target_portal: instance.targetPortal.respond_to?(:to_hash) ? instance.targetPortal.to_hash : instance.targetPortal,
        
      
    
      
        
        iqn: instance.iqn.respond_to?(:to_hash) ? instance.iqn.to_hash : instance.iqn,
        
      
    
      
        
        lun: instance.lun.respond_to?(:to_hash) ? instance.lun.to_hash : instance.lun,
        
      
    
      
        
        iscsi_interface: instance.iscsiInterface.respond_to?(:to_hash) ? instance.iscsiInterface.to_hash : instance.iscsiInterface,
        
      
    
      
        
        fs_type: instance.fsType.respond_to?(:to_hash) ? instance.fsType.to_hash : instance.fsType,
        
      
    
      
        
        read_only: instance.readOnly.respond_to?(:to_hash) ? instance.readOnly.to_hash : instance.readOnly,
        
      
    
      
        
        portals: hash_arrays(instance.portals),
        
      
    
      
        
        chap_auth_discovery: instance.chapAuthDiscovery.respond_to?(:to_hash) ? instance.chapAuthDiscovery.to_hash : instance.chapAuthDiscovery,
        
      
    
      
        
        chap_auth_session: instance.chapAuthSession.respond_to?(:to_hash) ? instance.chapAuthSession.to_hash : instance.chapAuthSession,
        
      
    
      
        
        secret_ref: instance.secretRef.respond_to?(:to_hash) ? instance.secretRef.to_hash : instance.secretRef,
        
      
    
      
        
        initiator_name: instance.initiatorName.respond_to?(:to_hash) ? instance.initiatorName.to_hash : instance.initiatorName,
        
      
    
    object: instance,
    }
  end

  def create
    Puppet.info("Creating kubernetes_iscsi_volume_source #{name}")
    create_instance_of('iscsi_volume_source', name, build_params)
  end

  def flush
   unless @property_hash.empty?
     unless resource[:ensure] == :absent
        flush_instance_of('iscsi_volume_source', name, @property_hash[:object], build_params)
      end
    end
  end

  def destroy
    Puppet.info("Deleting kubernetes_iscsi_volume_source #{name}")
    destroy_instance_of('iscsi_volume_source', name)
    @property_hash[:ensure] = :absent
  end

  private
  def self.list_instances
    list_instances_of('iscsi_volume_source')
  end

  def build_params
    params = {
    
      
        targetPortal: resource[:target_portal],
      
    
      
        iqn: resource[:iqn],
      
    
      
        lun: resource[:lun],
      
    
      
        iscsiInterface: resource[:iscsi_interface],
      
    
      
        fsType: resource[:fs_type],
      
    
      
        readOnly: resource[:read_only],
      
    
      
        portals: resource[:portals],
      
    
      
        chapAuthDiscovery: resource[:chap_auth_discovery],
      
    
      
        chapAuthSession: resource[:chap_auth_session],
      
    
      
        secretRef: resource[:secret_ref],
      
    
      
        initiatorName: resource[:initiator_name],
      
    
    }
    params.delete_if { |key, value| value.nil? }
    params
  end
end
