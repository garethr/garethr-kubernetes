
# This file is automatically generated by puppet-swagger-generator and
# any manual changes are likely to be clobbered when the files
# are regenerated.

require_relative '../../../puppet_x/puppetlabs/kubernetes/provider'

Puppet::Type.type(:kubernetes_service_spec).provide(:swagger, :parent => PuppetX::Puppetlabs::Kubernetes::Provider) do

  mk_resource_methods

  def self.instance_to_hash(instance)
    {
    ensure: :present,
    name: instance.metadata.name,
    
      
        
        ports: hash_arrays(instance.ports),
        
      
    
      
        
        selector: instance.selector.respond_to?(:to_hash) ? instance.selector.to_hash : instance.selector,
        
      
    
      
        
        cluster_ip: instance.clusterIP.respond_to?(:to_hash) ? instance.clusterIP.to_hash : instance.clusterIP,
        
      
    
      
        
        type: instance.type.respond_to?(:to_hash) ? instance.type.to_hash : instance.type,
        
      
    
      
        
        external_i_ps: hash_arrays(instance.externalIPs),
        
      
    
      
        
        session_affinity: instance.sessionAffinity.respond_to?(:to_hash) ? instance.sessionAffinity.to_hash : instance.sessionAffinity,
        
      
    
      
        
        load_balancer_ip: instance.loadBalancerIP.respond_to?(:to_hash) ? instance.loadBalancerIP.to_hash : instance.loadBalancerIP,
        
      
    
      
        
        load_balancer_source_ranges: hash_arrays(instance.loadBalancerSourceRanges),
        
      
    
      
        
        external_name: instance.externalName.respond_to?(:to_hash) ? instance.externalName.to_hash : instance.externalName,
        
      
    
      
        
        external_traffic_policy: instance.externalTrafficPolicy.respond_to?(:to_hash) ? instance.externalTrafficPolicy.to_hash : instance.externalTrafficPolicy,
        
      
    
      
        
        health_check_node_port: instance.healthCheckNodePort.respond_to?(:to_hash) ? instance.healthCheckNodePort.to_hash : instance.healthCheckNodePort,
        
      
    
      
        
        publish_not_ready_addresses: instance.publishNotReadyAddresses.respond_to?(:to_hash) ? instance.publishNotReadyAddresses.to_hash : instance.publishNotReadyAddresses,
        
      
    
      
        
        session_affinity_config: instance.sessionAffinityConfig.respond_to?(:to_hash) ? instance.sessionAffinityConfig.to_hash : instance.sessionAffinityConfig,
        
      
    
    object: instance,
    }
  end

  def create
    Puppet.info("Creating kubernetes_service_spec #{name}")
    create_instance_of('service_spec', name, build_params)
  end

  def flush
   unless @property_hash.empty?
     unless resource[:ensure] == :absent
        flush_instance_of('service_spec', name, @property_hash[:object], build_params)
      end
    end
  end

  def destroy
    Puppet.info("Deleting kubernetes_service_spec #{name}")
    destroy_instance_of('service_spec', name)
    @property_hash[:ensure] = :absent
  end

  private
  def self.list_instances
    list_instances_of('service_spec')
  end

  def build_params
    params = {
    
      
        ports: resource[:ports],
      
    
      
        selector: resource[:selector],
      
    
      
        clusterIP: resource[:cluster_ip],
      
    
      
        type: resource[:type],
      
    
      
        externalIPs: resource[:external_i_ps],
      
    
      
        sessionAffinity: resource[:session_affinity],
      
    
      
        loadBalancerIP: resource[:load_balancer_ip],
      
    
      
        loadBalancerSourceRanges: resource[:load_balancer_source_ranges],
      
    
      
        externalName: resource[:external_name],
      
    
      
        externalTrafficPolicy: resource[:external_traffic_policy],
      
    
      
        healthCheckNodePort: resource[:health_check_node_port],
      
    
      
        publishNotReadyAddresses: resource[:publish_not_ready_addresses],
      
    
      
        sessionAffinityConfig: resource[:session_affinity_config],
      
    
    }
    params.delete_if { |key, value| value.nil? }
    params
  end
end
