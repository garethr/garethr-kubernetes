
# This file is automatically generated by puppet-swagger-generator and
# any manual changes are likely to be clobbered when the files
# are regenerated.

require_relative '../../../puppet_x/puppetlabs/kubernetes/provider'

Puppet::Type.type(:kubernetes_pod_spec).provide(:swagger, :parent => PuppetX::Puppetlabs::Kubernetes::Provider) do

  mk_resource_methods

  def self.instance_to_hash(instance)
    {
    ensure: :present,
    name: instance.metadata.name,
    
      
        
        volumes: hash_arrays(instance.volumes),
        
      
    
      
        
        init_containers: hash_arrays(instance.initContainers),
        
      
    
      
        
        containers: hash_arrays(instance.containers),
        
      
    
      
        
        restart_policy: instance.restartPolicy.respond_to?(:to_hash) ? instance.restartPolicy.to_hash : instance.restartPolicy,
        
      
    
      
        
        termination_grace_period_seconds: instance.terminationGracePeriodSeconds.respond_to?(:to_hash) ? instance.terminationGracePeriodSeconds.to_hash : instance.terminationGracePeriodSeconds,
        
      
    
      
        
        active_deadline_seconds: instance.activeDeadlineSeconds.respond_to?(:to_hash) ? instance.activeDeadlineSeconds.to_hash : instance.activeDeadlineSeconds,
        
      
    
      
        
        dns_policy: instance.dnsPolicy.respond_to?(:to_hash) ? instance.dnsPolicy.to_hash : instance.dnsPolicy,
        
      
    
      
        
        node_selector: instance.nodeSelector.respond_to?(:to_hash) ? instance.nodeSelector.to_hash : instance.nodeSelector,
        
      
    
      
        
        service_account_name: instance.serviceAccountName.respond_to?(:to_hash) ? instance.serviceAccountName.to_hash : instance.serviceAccountName,
        
      
    
      
        
        service_account: instance.serviceAccount.respond_to?(:to_hash) ? instance.serviceAccount.to_hash : instance.serviceAccount,
        
      
    
      
        
        automount_service_account_token: instance.automountServiceAccountToken.respond_to?(:to_hash) ? instance.automountServiceAccountToken.to_hash : instance.automountServiceAccountToken,
        
      
    
      
        
        node_name: instance.nodeName.respond_to?(:to_hash) ? instance.nodeName.to_hash : instance.nodeName,
        
      
    
      
        
        host_network: instance.hostNetwork.respond_to?(:to_hash) ? instance.hostNetwork.to_hash : instance.hostNetwork,
        
      
    
      
        
        host_pid: instance.hostPID.respond_to?(:to_hash) ? instance.hostPID.to_hash : instance.hostPID,
        
      
    
      
        
        host_ipc: instance.hostIPC.respond_to?(:to_hash) ? instance.hostIPC.to_hash : instance.hostIPC,
        
      
    
      
        
        security_context: instance.securityContext.respond_to?(:to_hash) ? instance.securityContext.to_hash : instance.securityContext,
        
      
    
      
        
        image_pull_secrets: hash_arrays(instance.imagePullSecrets),
        
      
    
      
        
        hostname: instance.hostname.respond_to?(:to_hash) ? instance.hostname.to_hash : instance.hostname,
        
      
    
      
        
        subdomain: instance.subdomain.respond_to?(:to_hash) ? instance.subdomain.to_hash : instance.subdomain,
        
      
    
      
        
        affinity: instance.affinity.respond_to?(:to_hash) ? instance.affinity.to_hash : instance.affinity,
        
      
    
      
        
        scheduler_name: instance.schedulerName.respond_to?(:to_hash) ? instance.schedulerName.to_hash : instance.schedulerName,
        
      
    
      
        
        tolerations: hash_arrays(instance.tolerations),
        
      
    
      
        
        host_aliases: hash_arrays(instance.hostAliases),
        
      
    
      
        
        priority_class_name: instance.priorityClassName.respond_to?(:to_hash) ? instance.priorityClassName.to_hash : instance.priorityClassName,
        
      
    
      
        
        priority: instance.priority.respond_to?(:to_hash) ? instance.priority.to_hash : instance.priority,
        
      
    
    object: instance,
    }
  end

  def create
    Puppet.info("Creating kubernetes_pod_spec #{name}")
    create_instance_of('pod_spec', name, build_params)
  end

  def flush
   unless @property_hash.empty?
     unless resource[:ensure] == :absent
        flush_instance_of('pod_spec', name, @property_hash[:object], build_params)
      end
    end
  end

  def destroy
    Puppet.info("Deleting kubernetes_pod_spec #{name}")
    destroy_instance_of('pod_spec', name)
    @property_hash[:ensure] = :absent
  end

  private
  def self.list_instances
    list_instances_of('pod_spec')
  end

  def build_params
    params = {
    
      
        volumes: resource[:volumes],
      
    
      
        initContainers: resource[:init_containers],
      
    
      
        containers: resource[:containers],
      
    
      
        restartPolicy: resource[:restart_policy],
      
    
      
        terminationGracePeriodSeconds: resource[:termination_grace_period_seconds],
      
    
      
        activeDeadlineSeconds: resource[:active_deadline_seconds],
      
    
      
        dnsPolicy: resource[:dns_policy],
      
    
      
        nodeSelector: resource[:node_selector],
      
    
      
        serviceAccountName: resource[:service_account_name],
      
    
      
        serviceAccount: resource[:service_account],
      
    
      
        automountServiceAccountToken: resource[:automount_service_account_token],
      
    
      
        nodeName: resource[:node_name],
      
    
      
        hostNetwork: resource[:host_network],
      
    
      
        hostPID: resource[:host_pid],
      
    
      
        hostIPC: resource[:host_ipc],
      
    
      
        securityContext: resource[:security_context],
      
    
      
        imagePullSecrets: resource[:image_pull_secrets],
      
    
      
        hostname: resource[:hostname],
      
    
      
        subdomain: resource[:subdomain],
      
    
      
        affinity: resource[:affinity],
      
    
      
        schedulerName: resource[:scheduler_name],
      
    
      
        tolerations: resource[:tolerations],
      
    
      
        hostAliases: resource[:host_aliases],
      
    
      
        priorityClassName: resource[:priority_class_name],
      
    
      
        priority: resource[:priority],
      
    
    }
    params.delete_if { |key, value| value.nil? }
    params
  end
end
